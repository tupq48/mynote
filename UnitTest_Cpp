Unit test: kiểm thử đơn vị nhỏ nhất trong code như hàm, class, đảm bảo cho code hoạt động
================================== gmock vs gtest =======================================
1. Gmock
Macro:
MOCK_METHOD: thay thế cho MOCK_METHODN, tạo các phương thức giả trong lớp mock.
EXPECT_CALL: thiết lập mong muốn cho phương thức mock method hoạt động như thế nào, gồm nhiều các func đi kèm:
+ Times(): xác định số lần được gọi theo mong muốn
+ WillOnce: expect action xảy ra khi được gọi, có thể gọi nhiều lần để xác định các expect action lần lượt
+ WillRepeatedly: tương tự willOnce, nhưng apply for all call later
ON_CALL : được sử dụng để thiết lập hành vi mặc định cho các phương thức của mock object khi không có kỳ vọng cụ thể được thiết lập bằng EXPECT_CALL
InSequence: đảm bảo thứ tự gọi function theo expect_call
các tính năng chính cơ bản của mock sẽ bao gồm:
mock class
expectation (expect call)
Matcher (Le, Ge, Lt, …)
Action (return, exception, invoke, …)
Sequence (InSequence, …)
Thường được sử dụng khi cần kiểm tra các tương tác phức tạp giữa các đối tượng hoặc khi các đối tượng phụ thuộc cần được giả lập.
2. Gtest
  Assertions: Các macro để kiểm tra các điều kiện khác nhau.
gồm 2 loại chính:
Non-fatal Assertions (EXPECT_*): Nếu kiểm tra thất bại, test case vẫn tiếp tục chạy.
Fatal Assertions (ASSERT_*): Nếu kiểm tra thất bại, test case sẽ dừng lại ngay lập tức.
Test Fixtures: Hỗ trợ setup và teardown môi trường cho các test case.
class kế thừa ::testing::Test, override setup(), teardown() func để initialize các field/variable để dùng chung cho các TestF.
Parameterized Tests: Cho phép chạy cùng một test với nhiều bộ dữ liệu khác nhau.
Test Suites: Phân nhóm các test case thành các test suite để dễ quản lý.
 =============================================== expect vs assert ====================================================
EXPECT: thường dùng để kiểm tra các test case dù lỗi vẫn cho phép run các test case khác, điều kiện: các test case sau ko phụ thuộc vào các test case expect
ASSERT: đảm bảo rằng một điều kiện nhất định phải đúng trước khi tiếp tục với các kiểm tra hoặc bước tiếp theo trong test case.
example for assert:
TEST(FileGeneratorTest, CreatesFile) {
  ASSERT_TRUE(fp = fopen(path, "r"))
        << "Failed to open " << path;
  ASSERT_EQ(10, fread(buffer, 1, 10, fp))
        << "File " << path << " is too small";
  buffer[10] = '\0';
  EXPECT_STREQ("123456789", buffer)
        << "File " << path << " is corrupted";
}
ngoài case trên thì thường sử dụng expect khi dev để thấy được nhiều failed case, easy to fix.
============================================= Uninteresting vs Unexpected Calls ============================================
thường gặp trong GMock test
nếu 1 func được call mà ko có EXPECT_CALL thì đó là Uninteresting call
sẽ tự động bỏ qua
Unexpected call: call func được cấu hình nhưng (EXPECT_CALL) nhưng không khớp => báo lỗi, fail test

có 2 mode để dùng:
Nices Mock vs Strict Mock
Nices mock: các cuộc gọi không mong đợi (unexpected calls) sẽ được bỏ qua mà không gây ra lỗi trong test.
Strict mock: mọi cuộc gọi không mong đợi đều sẽ được coi là lỗi. Nếu có bất kỳ cuộc gọi nào mà không có EXPECT_CALL đi kèm => fail test

bên cạnh dó còn có 1 chế độ là Naggy Mock: Unexpected Calls sẽ được report cảnh báo nhưng sẽ ko fail test
============================================= Returning References vs Returning Live Values =============================================
============================================= Generater Report =============================================
lcov
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -coverage -fprofile-arcs -ftest-coverage")
find . -name "*.gcda"
lcov --capture --directory . --output-file coverage.info
lcov --remove coverage.info '/usr/*' --output-file coverage.info
genhtml coverage.info --output-directory coverage_report
xdg-open coverage_report/index.html

============================================= Matcher =============================================

stub






